[tox]
minversion = 3.3.0
isolated_build = True
skip_missing_interpreters = true

[testenv]
description = Run the tests
deps =
    coverage[toml]
    hypothesis>=5.7.0
    pytest
    pytest-cov
    pytest-randomly
    pytest-subtests
    pytest-xdist
extras =
    {env:TEST_EXTRAS_TOX:}
setenv =
    COVERAGE_FILE={toxworkdir}/.coverage/.coverage.{envname}
commands =
    pytest {toxinidir} {posargs: --cov=zoneinfo --cov=tests}

# This should probably be integrated into the main testenv as an option if such
# a thing is possible, but because it's more important that it runs on CI and
# it's not necessarily very cross-platform, I've split it out for now.
[testenv:gcov]
description = Run the tests and collect C coverage stats
deps =
    gcovr
    hypothesis>=5.7.0
    pytest
    pytest-subtests
extras =
    tzdata
passenv =
    CC
setenv =
    CFLAGS=--coverage -fprofile-dir={envdir}/coverage
    LDFLAGS=--coverage
    GCNO_TARGET_DIR={envdir}/coverage
commands =
    pytest {toxinidir}
    gcovr -r {toxinidir} -k
    python -c "import os; os.makedirs('{toxworkdir}/.coverage', exist_ok=True)"
    gcovr -r {toxinidir} --xml \
          -o {toxworkdir}/.coverage/.gcov_coverage.{envname}.xml

[testenv:coverage-report]
basepython = python3.8
skip_install = true
deps = coverage[toml]>=5.0.2
depends = py38
setenv=COVERAGE_FILE=.coverage
changedir = {toxworkdir}/.coverage
commands =
    coverage combine
    coverage report
    coverage xml

[testenv:codecov]
description = [only run on CI]: upload coverage data to codecov (depends on coverage running first)
deps = codecov
depends = coverage-report
passenv = CODECOV_TOKEN
skip_install = True
commands =
    python scripts/upload_codecov.py {toxworkdir}/.coverage

[testenv:format]
description = Run auto formatters
skip_install = True
whitelist_externals =
    bash
deps =
    black
    isort
commands =
    black .
    isort -rc scripts src tests docs
    bash -c 'clang-format --verbose -i lib/*.c'

[testenv:lint]
description = Run linting checks
skip_install = True
deps =
    black
    isort
commands =
    black --check .
    isort --check-only --recursive scripts src tests docs

[testenv:benchmark]
description = Run benchmarks
deps =
    click
    pytz
    python-dateutil
    tzdata
    pint[uncertainties]
commands =
    python scripts/benchmark.py {posargs}

[testenv:docs]
description = Build the documentation
deps =
    -rdocs/requirements.txt
commands =
    sphinx-build -d "{toxworkdir}/docs_doctree" "{toxinidir}/docs" "{toxinidir}/docs/_output" {posargs: -j auto -bhtml}


[testenv:build]
description = Build a wheel and source distribution
skip_install = True
deps =
    pep517
    twine
commands =
    python -m pep517.build -s -b {toxinidir} -o {toxinidir}/dist
    twine check {toxinidir}/dist/*
